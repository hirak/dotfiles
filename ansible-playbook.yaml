# ansible用playbook
- hosts: localhost
  connection: local
  sudo: no
  vars:
  {% if ansible_system == 'Linux' %}
    os_type: 'linux'
    jq_type: 'linux'
  {% elif ansible_system == 'Darwin' %}
    os_type: 'darwin'
    jq_type: 'osx'
  {% endif %}


  tasks:
    - name: 基本ツールインストール(RedHat系)
      when: ansible_os_family == 'RedHat'
      sudo: yes
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - yum-fastestmirror
        - "@Development tools"
        - rpmdevtools
        - createrepo
        - yum-utils
        - vim-enhanced
        - screen
        - ansible

    - name: 基本ツールインストール(Debian系)
      when: ansible_os_family == 'Debian'
      sudo: yes
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - build-essential
        - re2c
        - vim-enhanced
        - screen

    - name: dotfilesコピー
      git:
        dest: ~/src/github.com/hirak/dotfiles
        repo: git://github.com/hirak/dotfiles.git
        accept_hostkey: yes
        update: yes

    - name: dotfilesをリンク
      shell: sh link.sh
      args:
        chdir: ~/src/github.com/hirak/dotfiles/
        creates: ~/.vim/bundle/neobundle.vim

    # ghq
    - name: get latest ghq version
      shell: curl -sI https://github.com/motemen/ghq/releases/latest | awk -F'/' '/^Location:/{print $NF}'
      register: ghq_latest_version
      args:
        creates: ~/bin/ghq

    - name: Download latest ghq
      shell: |
        curl -sL https://github.com/motemen/ghq/releases/download/{{ ghq_latest_version.stdout }}/ghq_{{ os_type }}_amd64.tar.gz | \
        tar zx -C ~/bin/ --strip=1 '*/ghq'
        chmod +x ~/bin/ghq
      args:
        creates: ~/bin/ghq

    # peco
    - name: get latest peco version
      shell: curl -sI https://github.com/peco/peco/releases/latest | awk -F'/' '/^Location:/{print $NF}'
      register: peco_latest_version
      args:
        creates: ~/bin/peco

    - name: Download latest peco
      shell: |
        curl -sL https://github.com/peco/peco/releases/download/{{ peco_latest_version.stdout }}/peco_{{ os_type }}_amd64.tar.gz | \
        tar zx -C ~/bin/ --strip=1 '*/peco'
        chmod +x ~/peco
      args:
        creates: ~/bin/peco

    # direnv
    - name: get latest direnv version
      shell: curl -sI https://github.com/zimbatm/direnv/releases/latest | awk -F'/' '/^Location:/{print $NF}'
      register: direnv_latest_version
      args:
        creates: ~/bin/direnv

    - name: download latest direnv
      shell: |
        curl -sLo ~/bin/direnv https://github.com/zimbatm/direnv/releases/download/{{ direnv_latest_version.stdout }}/direnv.{{ os_type }}-amd64
        chmod +x ~/bin/direnv
      args:
        creates: ~/bin/direnv

    # jq
    - name: install jq
      get_url:
        url: http://stedolan.github.io/jq/download/{{ jq_type }}64/jq
        dest: ~/bin/
        mode: "0755"

    - name: nodebrewをインストール
      shell: curl -L git.io/nodebrew | perl - setup
      args:
        creates: ~/.nodebrew

    # php
    - name: php-buildを単独インストール
      git:
        dest: ~/src/github.com/php-build/php-build
        repo: git://github.com/hirak/php-build.git
        accept_hostkey: yes
        update: yes

    - name: php-buildのセットアップ
      shell: ln -s ~/src/github.com/php-build/php-build/bin/php-build ~/bin/php-build
      args:
        creates: ~/bin/php-build

    - name: ~/.php/を作成
      shell: mkdir -p ~/.php
      args:
        creates: ~/.php

    - name: composerダウンロード
      shell: |
        curl -sLo ~/bin/composer http://packagist.jp/composer.phar
        chmod +x ~/bin/composer
      args:
        creates: ~/bin/composer

    - name: phpunitダウンロード
      shell: |
        curl -sLo ~/bin/phpunit http://packagist.jp/phpunit.phar
        chmod +x ~/bin/phpunit
      args:
        creates: ~/bin/phpunit

